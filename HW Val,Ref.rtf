{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs40 \cf0 Differences between references and values\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b0\fs26 \cf0 \
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f2\fs24 \cf2 \cb3 -What each is (reference and value type)\
\
	Value\
	\
	An element its a value type wen the element it link to an a value that could be any value type, but if its copy the value of the previews element its saved.\
\
	Reference\
\
	An element its a reference when the element its coping and address of the location of the information in memory but its not related whit the information itself, so the References are directions, but wen you print it sill print the value of the direcction. \
\
\
\
    -how are they different \
\
This means that if you as an example copy an element type you will copy the value on a brand new space of the memory and it will be link to the value itself and if you modify the previews element this doesn\'92t affect the second element. \
\
But if you copy a reference element what you would do its associate another name or element link to the same direction, if you change the value on that direction the direction will change for bot of them \
\
So the objet of the value is the value itself and as a values when you copy the value you just made a new element that and the instant that it copy if you compare the copy whit the new one they will have the same value bur there are nit the same objet. in the case of the reference if you copy a reference you are only opening another access whit different name to the same addres \
\
\
    -how they are utilized in iOS, Swift, and ObjC\
\
It\'92s different  the use in an objective C environment	 because they use class @ objets in other to modify in most Comonly passes the pointer.\
\
\
\
    -pros and cons to either 
\f1\fs26 \cf0 \cb1 \
\pard\pardeftab560\slleading20\pardirnatural\qj\partightenfactor0
\cf0 Value \
\
Pros	\
\pard\pardeftab560\slleading20\qj\partightenfactor0
\cf0 \'a0Value Type holds the data and it will be not drop\
\pard\pardeftab560\slleading20\pardirnatural\qj\partightenfactor0
\cf0 Is faster work whit him since the use for this will not use type in a process since is already in the memory\
Cons\
If you are not familiar whit the beginning of the copy of a Value element you will not have any link o register	 of the source\
Uses more memory\
\
\
Reference.\
Pros.\
Uses less memory.\
Its link to his main source.\
Cons	\
It has to make a process every time is called	\
You have to know what type to item is in terms or be able to know that you are aware about what you are coping	 since you only see the pace is pointing not the item itself.\
\pard\pardeftab560\slleading20\qj\partightenfactor0
\cf0  	\
\
}